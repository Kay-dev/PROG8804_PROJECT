
name: "Build and Deploy Backend to Amazon ECS"

on:
  push:
    branches:
      - prod_8860
    paths:
      - "backend/**"
      - ".github/workflows/backend_workflow.yml"
  workflow_dispatch:

env:
  AWS_REGION: "ap-southeast-1"                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "final-repo"           # set this to your Amazon ECR repository name
  ECS_SERVICE: "final-service-backend"                 # set this to your Amazon ECS service name
  ECS_CLUSTER: "final-cluster"                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ".aws/final-task-definition-backend.json" # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: final-backend-container           # set this to the name of the container in the
                                         # containerDefinitions section of your task definition

jobs:
  deploy:
    runs-on: "ubuntu-latest"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "20"

      - name: Static Code Analysis
        run: |
          cd backend
          npm install eslint --save-dev
          npx eslint --init || true
          npx eslint . --max-warnings=0 || echo "Code scanning complete with warnings"

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests
        run: |
          cd backend
          npm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          mkdir -p .aws
          aws ecs describe-task-definition --task-definition final-task-definition-backend \
          --query taskDefinition --output json > ${{ env.ECS_TASK_DEFINITION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
